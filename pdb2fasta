#!/home/miro/anaconda2/bin/python

## Alex Holehouse
## Pappulab
## April 2014
##
## pdb2fasta
##
## Converts a PDB file 
##
##

def pdb2fastaException(Exception):
    pass

VERSION=0.2

AADICT = {"ALA":"A", 
          "CYS":"C", 
          "ASP":"D", 
          "GLU":"E",
          "PHE":"F",
          "GLY":"G",
          "HIS":"H",
          "HID":"H",
          "HIE":"H",
          "ILE":"I",
          "LYS":"K",
          "LEU":"L",
          "MET":"M",
          "ASN":"N",
          "PRO":"P",
          "GLN":"Q",
          "ARG":"R",
          "SER":"S",
          "THR":"T",
          "VAL":"V",
          "TRP":"W",
          "TYR":"Y",
          "ACE":"+",
          "NAC":"-",
	  "NME":"-"}
          

def print_header():
    print ("#############################################")
    print ("#                PDB2FASTA                  #")
    print ("#############################################")




def get_col_indices(collist):

    # Types of collumn setups
    # cols == 10
    #   COL=[ATOM]
    #   COL=[1]
    #   COL=[CH3]
    #   COL=[ACE]
    #   COL=[1]
    #   COL=[33.000]
    #   COL=[29.720]
    #   COL=[36.600]
    #   COL=[1.00]
    #   COL=[1.00]
    #
    # cols == 11
    #   COL=[ATOM]
    #   COL=[1]
    #   COL=[CH3]
    #   COL=[ACE]
    #   COL=[A] *****CHAIN******
    #   COL=[1]
    #   COL=[0.000]
    #   COL=[0.000]
    #   COL=[0.000]
    #   COL=[1.00]
    #   COL=[0.00]
    # cols == 12
    #   COL=[ATOM]
    #   COL=[1]
    #   COL=[N]
    #   COL=[LYS]
    #   COL=[A] *****CHAIN******
    #   COL=[1]
    #   COL=[35.365]
    #   COL=[22.342]
    #   COL=[-11.980]
    #   COL=[1.00]
    #   COL=[22.28]
    #   COL=[N] *******ATOM&&&&&&&

    sub=0

    for i in collist:
        # shouldn't find any '\t' give we split by whitespace...
        if i == "\n" or i == "\t":
            sub=sub+1

    num_cols = len(collist)-sub

    if num_cols == 11 or num_cols == 12:
        return (5,4)
    if num_cols == 10:
        return (4,-1)

    print ("Unexpected number of columns in PDB file - is this valid?")
    raise Exception
    


                     
def validateAA(AA):
    """
    Returns AA if a valid 3 letter amino acid
    else returns NULL
    """
    if AA in AADICT.keys():
        return AA
    else:
        return "NULL"
    
           
def read_file(pdbfilename):                                                                                                                                                                                                        
    """ Reads a file into a content list line by line                                                                                                                                                                                    
    and returns that list
    """
    with open(pdbfilename) as f:
        content = f.readlines()

    return content

def three2one(aa):
    try:
        return AADICT[aa.upper()]
    except KeyError:
        sys.stderr.write("Found non-amino acid residue in PDB file... [" + str(aa) + "]\n")
        return "NULL"


def splitPDBLine(line):
    lin_temp = line.replace('-', ' ').split()
    if len(lin_temp[2]) > 3:
        #we need this because sometimes the resname is too long so this split method will not work. e.g in multiple conformers have resnames like ASER instead of SER
        atom_name = lin_temp[2][0:2]
        resname = lin_temp[2][3:]
        lin_temp.pop(2)
        lin_temp.insert(1,atom_name)
        lin_temp.insert(2,resname)
    return lin_temp
    

def read_residues(content):
    
    """ Function to read the content list and extract residues into
    a residue list. Note this uses lists and not dictionaries
    so if a PDB has multiple residues with the same number (but
    , for example, different chains) we don't overwrite residues.
    
    This the get_residue function is a search operation instead of
    a dictionary lookup, but builds in robustness and redunancy which
    is good! 
    """
        
    residues = []

    # scan through the content and pull residues
    # into a list
    allres = []
    temp_res =[]

    # determine number of columns being used
    for line in content:

        # first line where the column read 'ATOM'
        if filter(None, line.split(" "))[0].upper() == "ATOM":
            
            # note we replace - with ' '  because CAMPARI sometimes
            # uses - to seperate columns (seriously)
            atomline = splitPDBLine(line)

            
            (resid_num,chain_num) = get_col_indices(atomline)
            break
        
    first=True
    
    for line in content:

        linelist = splitPDBLine(line)
        
        # if the current line is an atom...
        if linelist[0].upper() == "ATOM":            

            # if this is the first time use this to define how the numbering works out            
            if first:
                first=False
                                
                # define the where we start residue numbering from
                current_res=int(linelist[resid_num])
                
                temp_res.append(linelist)
                # skip  to the next line
                continue
            


            # linelist is the parsed PDB line split into its constitutive columns
            


            # CASE 1
            # if the current atom comes a residue equal to the
            # current_res then append this atom to the temp_res
            # list (think of the temp_res list as a list which holds a residue's
            # constitutive atoms  residue as it's built     
            if current_res == int(linelist[resid_num]):
                temp_res.append(linelist)

            # CASE 2
            # If the current_res+1 is equal to the residue of the
            # line's atom we've move onto the next residue
            elif current_res+1 == int(linelist[resid_num]):
                                
                # increment the current residue counter
                current_res=current_res+1              

                # add the list of atoms to the allres list
                if len(temp_res) > 0: 
                    allres.append(temp_res)
                    temp_res = []
                    temp_res.append(linelist)
                else:
                    print ("ERROR")
                    raise pdb2fastaException("Found a residue with no atoms? LINE: " + line)

                
        if linelist[0].upper().strip() == "TER":
            allres.append(temp_res)
            temp_res = []
            first=True

        if linelist[0].upper().strip() == "END":
            allres.append(temp_res)
            temp_res = []
            

    return allres


## ===================================================================================================
##                              Main Script - hold onto your hat!
## ===================================================================================================

if __name__=="__main__":
    import argparse 
    import sys
    from numpy import std, mean

    parser = argparse.ArgumentParser()
    parser.add_argument("--file","-f", help="PDB file") 
    parser.add_argument("--chain","-c", help="Chain in PDB file (optional)") 
    parser.add_argument("--three","-t", help="Print three letter codes (optional)",action='store_true', default=False)
    parser.add_argument("--usage","-u", help="Print help and exit",action='store_true', default=False)
    parser.add_argument("--version","-v", help="Print version and exit",action='store_true', default=False)
    parser.add_argument("--absinth","-a",  help="Print sequence in CAMPARI sequence mode",action='store_true', default=False)
    parser.add_argument("--oneline","-o",  help="Print AA sequence in FASTA format in one line without spaces",action='store_true', default=False)

    args = parser.parse_args()

    if args.usage:
        print_header()

        print (" Usage:")
        print (" pdb2fasta -f <pdb file> # print protein sequence from PDB file")
        print (" pdb2fasta -c <pdb file> # print number and names of chains in file")
        print (" pdb2fasta -f <pdb file> -c <chain> # print protein sequence from chain <chain> in PDB file")
        print (" pdb2fasta -f <pdb file> [-c <chain>] -t # print three letter code instead of one letter code")
        print (" pdb2fasta -f <pdb file> [-c <chain>] -absinth # print a sequence using CAMPARI mode")
        print ("")
        print (" For additional help or bug reports see https://github.com/alexholehouse/pdb2fasta")
        print (" Version " + str(VERSION))
        exit(0)

    if args.version:
        print (" Version " + str(VERSION))
        exit(0)        

    if args.file:
        filename=args.file        
    elif args.chain:
        print ("In chain mode - counting number of chains")
        filename=args.chain
        content = read_file(filename)
        residues = read_residues(content)

        # determine the number of real columns in the "ATOMS" lines of the PDB file
        (resid_num,chain_num) = get_col_indices(residues[0][0])
        
        if chain_num == -1:
            print ("Unable to get chain number from PDB file")
        
        chaincount=0
        chaincurrent="-"
        chainlist = []
        for i in residues:
            atom = i[0]
            if atom[chain_num] == chaincurrent:
                pass
            else:
                
                chaincount=chaincount+1
                chaincurrent=atom[chain_num]
                chainlist.append(chaincurrent)
        print ("Number of chains: " + str(chaincount))
        print ("Chains are: " + str(chainlist))
        exit(0)
            
            
    else:
        
        print ("[FATAL ERROR]: Please provide a filename (-f 'filename')")
        exit(1)


    content = read_file(filename)

    residues = read_residues(content)

    (resid_num,chain_num) = get_col_indices(residues[0][0])
    resname_num = 3 # note this is always three irrespective of PDB type

    

    if args.chain:        

        if chain_num == -1:
            print ("Unable to get chain number from PDB file")
    
        count=0
        for res in residues:
            atom = res[0]
            if atom[chain_num] == args.chain:

                # outchar = 3 letter AA code if a valid AA
                # or is equal to "NULL"
                outchar = validateAA(atom[resname_num])
                
                # if NULL continue
                if outchar == "NULL":
                    sys.stderr.write("Found non-amino acid residue in PDB file... [" + str(atom[resname_num]) + "]\n")
                    continue
                                
                # if want 3 letter output but NOT absinth format
                if args.three and not args.absinth:                    
                    if count%20 == 0 and not count == 0:
                        print ("")

                    sys.stdout.write(outchar)
                    sys.stdout.write(" ")
                    
                # if want absinth output format
                elif args.absinth:
                    sys.stdout.write(outchar)
                    sys.stdout.write("\n")

                # want standard 1 letter FASTA format
                else:
                    if count%50 == 0 and not count == 0:
                        print ("")
                    sys.stdout.write(three2one(outchar))
                    if count%10 == 0 and not count%50 == 0 and not count == 0:
                        sys.stdout.write(" ")

                count=count+1

        # if absinth output end with END string
        if args.absinth:
            sys.stdout.write("END\n")
        else:
            print ("")
    else:        

        count=0
        for res in residues:
            atom = res[0]

            # outchar = 3 letter AA code if a valid AA
            # or is equal to "NULL"
            outchar = validateAA(atom[resname_num])

            # if NULL continue
            if outchar == "NULL":
                sys.stderr.write("Found non-amino acid residue in PDB file... [" + str(atom[resname_num]) + "]\n")
                continue


            if args.three and not args.absinth and not args.oneline:
                if count%20 == 0 and not count == 0:
                    print ("")

                sys.stdout.write(outchar)
                sys.stdout.write(" ")
            elif args.absinth:
                sys.stdout.write(outchar)
                sys.stdout.write("\n")
            elif not args.oneline:
                if count%50 == 0 and not count == 0:
                    print ("")

                sys.stdout.write(three2one(outchar))

                if count%10 == 0 and not count%50 == 0 and not count == 0 and not args.oneline:
                    sys.stdout.write(" ")
            if args.oneline:
                sys.stdout.write(three2one(outchar))
                count = count + 1

            count=count+1
        if args.absinth:
            sys.stdout.write("END\n")
        else:
            print ("")

  
